const fs = require('fs');
const { parse } = require('csv-parse/sync');

// selected 目录下筛选好的图片的 id
const selectedIds = [
  '107',
  '1009',
  '1012',
  '1017',
  '102',
  '1024',
  '1025',
  '1029',
  '103',
  '1034',
  '1036',
  '1041',
  '1047',
  '1048',
  '1051',
  '1057',
  '106',
  '1061',
  '1063',
  '1070',
  '1073',
  '1074',
  '1075',
  '1079',
  '108',
  '1081',
  '109',
  '1092',
  '1093',
  '1094',
  '1097',
  '11',
  '110',
  '1101',
  '1103',
  '1104',
  '1107',
  '1117',
  '112',
  '1123',
  '113',
  '1139',
  '1144',
  '1145',
  '1146',
  '1148',
  '115',
  '1154',
  '1159',
  '116',
  '1160',
  '1161',
  '1166',
  '1168',
  '1169',
  '117',
  '1171',
  '1173',
  '1174',
  '118',
  '1180',
  '1196',
  '1198',
  '120',
  '1202',
  '1204',
  '1205',
  '1209',
  '1211',
  '1214',
  '1215',
  '1217',
  '1218',
  '1219',
  '1223',
  '1224',
  '1226',
  '1228',
  '1230',
  '1232',
  '1233',
  '1234',
  '1235',
  '1236',
  '1237',
  '124',
  '1242',
  '1245',
  '1248',
  '1249',
  '1253',
  '1255',
  '1257',
  '1258',
  '1259',
  '126',
  '1263',
  '1264',
  '1265',
  '1269',
  '1272',
  '1274',
  '1275',
  '1276',
  '1279',
  '1282',
  '129',
  '1291',
  '1292',
  '1298',
  '130',
  '1301',
  '1307',
  '1308',
  '1309',
  '131',
  '1318',
  '132',
  '1320',
  '1323',
  '1325',
  '1327',
  '1328',
  '1329',
  '133',
  '1330',
  '1331',
  '1332',
  '1337',
  '1342',
  '21',
  '1349',
  '1360',
  '1371',
  '1373',
  '1376',
  '1378',
  '1379',
  '1380',
  '1381',
  '1382',
  '1384',
  '1385',
  '1387',
  '1388',
  '1389',
  '1395',
  '1400',
  '1401',
  '1403',
  '1404',
  '1407',
  '1410',
  '1412',
  '1421',
  '1423',
  '1424',
  '1427',
  '1428',
  '1429',
  '1431',
  '1438',
  '1440',
  '1444',
  '1452',
  '1455',
  '146',
  '1464',
  '1467',
  '147',
  '1472',
  '1474',
  '1475',
  '1478',
  '1479',
  '1480',
  '1484',
  '149',
  '1503',
  '1507',
  '1512',
  '1513',
  '152',
  '1522',
  '1526',
  '1529',
  '1535',
  '1539',
  '1540',
  '1541',
  '1542',
  '1543',
  '1544',
  '1546',
  '1554',
  '1556',
  '1559',
  '1561',
  '1562',
  '1564',
  '1565',
  '1566',
  '1572',
  '1573',
  '1575',
  '1576',
  '1584',
  '1586',
  '1588',
  '159',
  '1592',
  '1594',
  '1595',
  '1596',
  '1597',
  '1598',
  '16',
  '1600',
  '1604',
  '1606',
  '1607',
  '1608',
  '1609',
  '1610',
  '1612',
  '1613',
  '1616',
  '1618',
  '1619',
  '162',
  '1620',
  '1621',
  '1622',
  '1624',
  '1625',
  '1626',
  '1627',
  '1628',
  '1631',
  '1633',
  '1637',
  '1639',
  '164',
  '1642',
  '1643',
  '1649',
  '165',
  '1656',
  '1657',
  '1659',
  '1661',
  '1662',
  '1664',
  '167',
  '1675',
  '1681',
  '1685',
  '1687',
  '1692',
  '170',
  '1703',
  '1705',
  '1706',
  '1710',
  '1711',
  '1712',
  '172',
  '1724',
  '1725',
  '1726',
  '1727',
  '173',
  '1732',
  '1735',
  '1738',
  '1740',
  '1742',
  '1745',
  '1748',
  '1751',
  '1753',
  '1754',
  '1756',
  '1758',
  '1762',
  '1764',
  '1768',
  '1769',
  '1771',
  '1773',
  '1774',
  '1776',
  '1779',
  '1781',
  '1782',
  '1783',
  '1784',
  '1785',
  '1786',
  '1787',
  '1789',
  '179',
  '1790',
  '1791',
  '1792',
  '1793',
  '1794',
  '1796',
  '1799',
  '18',
  '180',
  '1803',
  '1804',
  '1806',
  '1814',
  '1821',
  '1823',
  '183',
  '1834',
  '1839',
  '1852',
  '1867',
  '1870',
  '1872',
  '1876',
  '1879',
  '188',
  '189',
  '1894',
  '1909',
  '1912',
  '1916',
  '1919',
  '1937',
  '1939',
  '194',
  '1941',
  '1942',
  '1943',
  '1946',
  '1962',
  '1964',
  '197',
  '1970',
  '1971',
  '198',
  '1982',
  '1987',
  '1990',
  '1991',
  '1993',
  '1998',
  '2',
  '20',
  '2001',
  '2002',
  '2003',
  '2005',
  '2007',
  '201',
  '2010',
  '2011',
  '2020',
  '204',
  '2047',
  '2048',
  '2049',
  '2068',
  '2072',
  '2086',
  '2088',
  '209',
  '2104',
  '2106',
  '2107',
  '2108',
  '2109',
  '2110',
  '2111',
  '2114',
  '2116',
  '2119',
  '2121',
  '2123',
  '2124',
  '2126',
  '2128',
  '2129',
  '213',
  '2131',
  '2134',
  '2135',
  '2138',
  '2149',
  '2154',
  '2156',
  '2159',
  '2162',
  '2165',
  '2166',
  '2169',
  '217',
  '2174',
  '2178',
  '2179',
  '2183',
  '2188',
  '2194',
  '2195',
  '2198',
  '22',
  '2211',
  '2215',
  '2217',
  '222',
  '2224',
  '2228',
  '2230',
  '2231',
  '2235',
  '2236',
  '2237',
  '224',
  '2240',
  '2243',
  '2244',
  '2247',
  '2250',
  '2252',
  '2253',
  '2259',
  '226',
  '2261',
  '2270',
  '2271',
  '2272',
  '2273',
  '2277',
  '2278',
  '2280',
  '2281',
  '2284',
  '2285',
  '2286',
  '2288',
  '2289',
  '2292',
  '2294',
  '2298',
  '23',
  '230',
  '2300',
  '2301',
  '2302',
  '2303',
  '2306',
  '2307',
  '2309',
  '2313',
  '2315',
  '2317',
  '2322',
  '2323',
  '2325',
  '2326',
  '2327',
  '2328',
  '2329',
  '233',
  '2331',
  '2335',
  '2342',
  '2349',
  '2355',
  '2359',
  '2363',
  '237',
  '2373',
  '2375',
  '2378',
  '238',
  '2384',
  '2389',
  '2390',
  '2391',
  '2392',
  '2393',
  '2396',
  '2398',
  '2400',
  '2403',
  '244',
  '2441',
  '2442',
  '2444',
  '2455',
  '2456',
  '2458',
  '2461',
  '247',
  '2472',
  '2475',
  '2476',
  '2477',
  '2479',
  '2480',
  '2481',
  '2483',
  '2484',
  '2486',
  '2489',
  '2490',
  '2491',
  '2494',
  '2497',
  '2498',
  '25',
  '2500',
  '2501',
  '2503',
  '2504',
  '2508',
  '2509',
  '2510',
  '2511',
  '2513',
  '2514',
  '2515',
  '2516',
  '2517',
  '2520',
  '2521',
  '2524',
  '2526',
  '2527',
  '2528',
  '2529',
  '2530',
  '2536',
  '2541',
  '2544',
  '2548',
  '2549',
  '2551',
  '2552',
  '2555',
  '2556',
  '2562',
  '2564',
  '257',
  '2570',
  '2575',
  '2577',
  '2582',
  '2599',
  '26',
  '2600',
  '2603',
  '2606',
  '2611',
  '2612',
  '2618',
  '2619',
  '2620',
  '2624',
  '2628',
  '2630',
  '2634',
  '2641',
  '2642',
  '2643',
  '2647',
  '2649',
  '2650',
  '2651',
  '2654',
  '2655',
  '2658',
  '2659',
  '2663',
  '2664',
  '2665',
  '2666',
  '2667',
  '2668',
  '2669',
  '2670',
  '2673',
  '2674',
  '2676',
  '2678',
  '2683',
  '2684',
  '2685',
  '2686',
  '2687',
  '2688',
  '2689',
  '2690',
  '2691',
  '2694',
  '2695',
  '2696',
  '2698',
  '2699',
  '27',
  '2700',
  '2702',
  '2708',
  '2709',
  '2716',
  '2717',
  '2719',
  '2725',
  '2733',
  '2736',
  '2738',
  '2741',
  '2743',
  '2795',
  '28',
  '2800',
  '2801',
  '2802',
  '2804',
  '2805',
  '2807',
  '2810',
  '2813',
  '2817',
  '282',
  '2827',
  '2838',
  '2841',
  '2842',
  '2845',
  '2849',
  '2854',
  '286',
  '2860',
  '2861',
  '2867',
  '2868',
  '2871',
  '2872',
  '2873',
  '2875',
  '2878',
  '288',
  '2880',
  '2881',
  '2882',
  '2884',
  '2885',
  '2889',
  '2890',
  '2895',
  '2896',
  '2898',
  '2899',
  '29',
  '290',
  '2900',
  '2902',
  '2905',
  '2907',
  '2910',
  '2911',
  '2918',
  '2920',
  '2926',
  '2946',
  '2948',
  '295',
  '2955',
  '297',
  '2972',
  '2975',
  '2976',
  '2981',
  '2985',
  '2988',
  '2992',
  '3',
  '302',
  '306',
  '31',
  '317',
  '319',
  '32',
  '324',
  '329',
  '33',
  '330',
  '335',
  '338',
  '340',
  '343',
  '345',
  '348',
  '350',
  '364',
  '366',
  '370',
  '373',
  '375',
  '382',
  '389',
  '392',
  '394',
  '399',
  '4',
  '40',
  '409',
  '41',
  '414',
  '417',
  '419',
  '42',
  '420',
  '422',
  '425',
  '43',
  '430',
  '44',
  '441',
  '450',
  '455',
  '456',
  '457',
  '459',
  '461',
  '462',
  '463',
  '465',
  '47',
  '472',
  '473',
  '474',
  '475',
  '48',
  '482',
  '483',
  '484',
  '487',
  '488',
  '489',
  '495',
  '496',
  '499',
  '5',
  '500',
  '502',
  '504',
  '505',
  '507',
  '508',
  '51',
  '515',
  '516',
  '519',
  '522',
  '524',
  '53',
  '530',
  '531',
  '536',
  '539',
  '54',
  '542',
  '547',
  '55',
  '553',
  '554',
  '555',
  '56',
  '561',
  '562',
  '563',
  '565',
  '566',
  '57',
  '573',
  '577',
  '579',
  '58',
  '582',
  '583',
  '585',
  '589',
  '591',
  '593',
  '595',
  '6',
  '60',
  '601',
  '604',
  '606',
  '61',
  '615',
  '62',
  '625',
  '629',
  '630',
  '635',
  '636',
  '637',
  '643',
  '646',
  '65',
  '650',
  '651',
  '656',
  '659',
  '66',
  '661',
  '662',
  '663',
  '665',
  '666',
  '667',
  '669',
  '67',
  '670',
  '672',
  '673',
  '675',
  '678',
  '679',
  '682',
  '683',
  '684',
  '686',
  '689',
  '69',
  '690',
  '692',
  '694',
  '695',
  '696',
  '697',
  '701',
  '702',
  '703',
  '704',
  '705',
  '706',
  '707',
  '709',
  '71',
  '710',
  '712',
  '714',
  '715',
  '716',
  '717',
  '718',
  '719',
  '72',
  '722',
  '723',
  '724',
  '725',
  '726',
  '728',
  '729',
  '73',
  '730',
  '731',
  '732',
  '733',
  '734',
  '735',
  '737',
  '738',
  '74',
  '740',
  '741',
  '742',
  '743',
  '744',
  '745',
  '746',
  '751',
  '753',
  '754',
  '755',
  '756',
  '760',
  '762',
  '764',
  '765',
  '768',
  '769',
  '77',
  '770',
  '771',
  '773',
  '774',
  '775',
  '776',
  '777',
  '778',
  '779',
  '78',
  '781',
  '782',
  '783',
  '784',
  '785',
  '788',
  '79',
  '792',
  '793',
  '794',
  '795',
  '796',
  '797',
  '798',
  '8',
  '800',
  '802',
  '809',
  '81',
  '817',
  '82',
  '820',
  '83',
  '84',
  '846',
  '847',
  '852',
  '876',
  '882',
  '885',
  '896',
  '898',
  '899',
  '9',
  '90',
  '900',
  '902',
  '903',
  '904',
  '905',
  '908',
  '91',
  '911',
  '912',
  '913',
  '915',
  '916',
  '917',
  '918',
  '92',
  '922',
  '923',
  '925',
  '927',
  '928',
  '929',
  '93',
  '931',
  '933',
  '934',
  '936',
  '939',
  '94',
  '940',
  '941',
  '944',
  '946',
  '949',
  '95',
  '951',
  '953',
  '956',
  '957',
  '963',
  '966',
  '967',
  '968',
  '970',
  '971',
  '974',
  '98',
  '984',
  '986',
  '990',
  '996',
];

/**
 * 图片乱序方法
 *
 * @param {array} imageIds 筛选出来的图片 ids + 1/1 ids
 * @return {array} 返回一个 random 的 id 数组
 */
const shuffle = (imageIds) => {
  let currentIndex = imageIds.length,
    randomIndex;

  while (currentIndex != 0) {
    randomIndex = Math.floor(Math.random() * currentIndex);
    currentIndex--;

    [imageIds[currentIndex], imageIds[randomIndex]] = [
      imageIds[randomIndex],
      imageIds[currentIndex],
    ];
  }

  return imageIds;
};

const imagePaths = {
  selected: './selected/',
  special: './special/',
};
const newImagePath = './export/images/';
const newMetadataPath = './export/metadata/';

// 替换成你的项目的 description
const desc = `中国人不骗中国人！国产良心 NFT 是专为中国人打造的一个存在于以太坊区块链上的由代码随机生成 1000 个国产良心 NFT。国产良心 NFT 的持有者将会获得一个头像，并且拥有扶持国产良心 NFT 的义务。For English speakers, we do not provide an English version, please consider learning Chinese or using Google Translate. Thanks.`;

// 创建一个 1/1 traits csv 列表用来生成 1/1 的 metadata
const specialTraits = {};
const traitsFile = fs.readFileSync('./special_traits.csv', 'utf8');
const traits = parse(traitsFile);
for (const [specId, beijing, lian, yanjing, bizi, zuiba, faxing] of traits) {
  specialTraits[specId.trim()] = [beijing, lian, yanjing, bizi, zuiba, faxing];
}

const getAtttById = (id) => {
  const [bj, l, y, b, z, f] = specialTraits[id.toString().trim()];
  const result = [
    { trait_type: 'Beijing', value: bj },
    { trait_type: 'Lian', value: l },
    { trait_type: 'Yanjing', value: y },
    { trait_type: 'Bizi', value: b },
    { trait_type: 'Zuiba', value: z },
    { trait_type: 'Faxing', value: f },
  ].filter((r) => !!r.value);
  return result;
};

/**
 * 对一些不合理的 trait 名称进行转化，可根据具体情况写逻辑
 * 对于国产良心 NFT 来说，我们有区分男性发型，开心或生气的表情，
 * 但对于 trait 展示来说，不想将细分类展示出来，所以就 format 了一下
 *
 * @param {array} attrs metadata 里的 attributes 数组
 * @return {array} 返回一个 format 后的 attributes 数组
 */
const normalizeAttr = (attrs) => {
  const newAttrs = [];
  for (const attr of attrs) {
    let type = attr['trait_type'];
    switch (type.toLowerCase()) {
      case 'yanjingkaixin':
      case 'yanjingshengqi':
        type = 'Yanjing';
        break;
      case 'zuibakaixin':
      case 'zuibashengqi':
        type = 'Zuiba';
        break;
      case 'faxingnan':
      case 'faxingshengqi':
        type = 'Faxing';
        break;
    }

    let value = attr['value'];
    if (type.toLowerCase() === 'beijing') {
      value = 'Beijing';
    }
    newAttrs.push({ trait_type: type, value: value });
  }
  return newAttrs;
};

/**
 * 合并筛选后的图片和 1/1 图片，并调用 shuffle 方法进行打乱
 * 再将对应的 build 目录下的原始 metadata 文件内容读取出来进行 metadata 内容更新
 * 同时对于 1/1 图片的 metadata，通过 getAtttById 方法进行更新
 * 最终此方法会生成最终的图片和 metadata（metadata JSON 中的 image 地址还需要之后进行更新）
 */
const main = async () => {
  const specialFiles = await fs.readdirSync('./special/');

  const selected = selectedIds.map((i) => `selected:${i}`);
  const special = specialFiles.map((f) => `special:${f.split('.')[0]}`);

  const normal = selected.concat(special);
  const shuffled = shuffle(normal);

  for (const [index, file] of shuffled.entries()) {
    const [category, id] = file.split(':');
    if (id !== '') {
      const oldImage = `${imagePaths[category]}${id}.png`;
      const newImage = `${newImagePath}${index}.png`;

      let newMetadata;
      if (category === 'selected') {
        const oldMetadataFile = await fs.readFileSync(
          `./build/json/${id}.json`
        );
        const oldMetadata = JSON.parse(oldMetadataFile);
        newMetadata = {
          name: `GuoChanLiangXin #${index}`,
          description: desc,
          image: `ipfs://NewUriToReplace/${index}.png`,
          attributes: normalizeAttr(oldMetadata['attributes']),
        };
      } else {
        newMetadata = {
          name: `GuoChanLiangXin #${index}`,
          description: desc,
          image: `ipfs://NewUriToReplace/${index}.png`,
          attributes: getAtttById(id),
        };
      }

      await fs.writeFileSync(
        `${newMetadataPath}${index}`,
        JSON.stringify(newMetadata)
      );

      await fs.copyFileSync(oldImage, newImage);
    }
  }
};

main();
